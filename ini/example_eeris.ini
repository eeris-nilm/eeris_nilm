## General configuration
[eeRIS]
# URL for mongodb database used for persistent storage
dburl = mongodb://localhost:27017/
# Name of the database
dbname = eeris
# Three input methods are supported, HTTP REST requests, MQTT and
# reading data from a file:
#input_method = rest
#input_method = file
input_method = mqtt
# Which installation ids we are responsible for. These are mongo object ids.
inst_ids = 5e05d63c3e442d4f78db0513, 5e05d5c83e442d4f78db01f8
# Format of the response. Possible values are 'cenote' and 'debug'
response = cenote
# Start separate threads for clustering, sending of activations etc. This should
# be 'True' for deployment and 'False' for debugging purposes.
thread = True

[FILE]
# Assume file names of the form '/path/installation_id_date.csv', e.g.
# /var/data/5f04dfd83a44254fc8db0a02_2020-01-01.csv
prefix = /path/to/file/prefix
date_start = '2020-01-01T00:00'
date_end = '2020-01-10T00:00'

[REST]
# REST endpoints are protected with jwt
jwt_psk = your_secret_key_here
# Optional NILM URL for debugging
url = nilm.url

[MQTT]
# MQTT configuration
broker = http://broker.url.here
port = 8883
crt = /path/to/client.crt
key = /path/to/client.key
ca = /path/to/m_ca.crt
topic_prefix = eeris
identity = eeris_nilm_local

# The orchestrator is responsible for storing detected events in the
# database. It can also perform batch rertrieval of past data for model
# recomputation.
[orchestrator]
# When debug_mode is on, data is printed in stderr but not sent to the
# orchestrator.
debug_mode = on
url = http://orchestrator.url.here
# Endpoint to use for sending appliance activation events
act_endpoint = historical/events
# Endpoint to use for getting data for recomputations
comp_endpoint = historical/
# Orchestrator JWT pre-shared key
jwt_psk = your_secret_key_here